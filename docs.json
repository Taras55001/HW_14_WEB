{
    "src.repository.users": {
        "confirmed_email": "\"\"\"\nConfirms a user's email by setting the 'confirmed' flag to True.\n\n:param email: The email address of the user to confirm.\n:type email: str\n:param db: An asynchronous database session.\n:type db: AsyncSession\n\"\"\"",
        "create_user": "\"\"\"\nCreates a user in the database.\n\n:param name: The name of the user to create.\n:type name: str\n:param email: The email address of the user to create.\n:type email: str\n:param db: An asynchronous database session.\n:type db: AsyncSession\n\"\"\"",
        "get_user_by_email": "\"\"\"\nGets a user from the database by email address.\n\n:param email: The email address of the user to get.\n:type email: str\n:param db: An asynchronous database session.\n:type db: AsyncSession\n:returns: The user from the database corresponding to the given email.\n:rtype: User\n\"\"\"",
        "remove_user": "\"\"\"\nRemoves a user from the database.\n\n:param user_id: The ID of the user to remove.\n:type user_id: str\n:param db: An asynchronous database session.\n:type db: AsyncSession\n\"\"\"",
        "select": "\"\"\"\n\nselect() accepts a single argument, a database session, and returns a list of records from the database.\n\n:param db: An asynchronous database session.\n:type db: AsyncSession\n\n\"\"\"",
        "update_avatar": "\"\"\"\nUpdates a user's avatar.\n\n:param user_id: The ID of the user to update.\n:type user_id: int\n:param avatar_url: The URL of the avatar to set.\n:type avatar_url: str\n\"\"\"",
        "update_token": "\"\"\"\nUpdates an authentication token for a user.\n\n:param token: The authentication token to update.\n:type token: str\n:param user_id: The ID of the user to update the token for.\n:type user_id: int\n:param db: An asynchronous database session.\n:type db: AsyncSession\n\"\"\"",
        "update_user": "\"\"\"\nUpdate a user's information.\n\n:param user: The user object to update.\n:type user: User\n:param new_data: The new data for the user.\n:type new_data: dict\n:param db: An asynchronous database session.\n:type db: AsyncSession\n\"\"\""
    }
}{
    "src.repository.contacts": {
        "create_contact": "\"\"\"\n    Creates a new contact for a user.\n\n    :param body: ContactResponse instance containing contact information.\n    :type body: ContactResponse\n    :param db: An asynchronous database session.\n    :type db: AsyncSession\n    :param user: The User instance representing the user.\n    :type user: User\n    :return: The created Contact instance or None if an IntegrityError occurs.\n    :rtype: Contact or None\n    \"\"\"",
        "get_contact": "\"\"\"\nVerifies a user's email by setting the 'confirmed' flag to True.\n\n:param email: The email address of the user to confirm.\n:type email: str\n:param db: An asynchronous database session.\n:type db: AsyncSession\n\"\"\"",
        "get_contacts": "\"\"\"\ng    Retrieves a list of contacts from an asynchronous database session.\n\n    :param db: An asynchronous database session.\n    :type db: AsyncSession\n    :returns: A list of contact dictionaries.\n    :rtype: list\n\"\"\"",
        "or_": "\"\"\"\nor_ allows a user to perform an OR operation on two boolean values.\n\n:param a: The first boolean value to OR.\n:type a: bool\n:param b: The second boolean value to OR.\n:type b: bool\n:return: The result of the OR operation.\n:rtype: bool\n\"\"\"",
        "remove_contact": "\"\"\"\nRemoves a contact from the database.\n\n:param contact_id: The ID of the contact to remove.\n:type contact_id: int\n:param db: An asynchronous database session.\n:type db: AsyncSession\n\"\"\"",
        "search_contact": "\"\"\"\nSearch contact checks for the existence of an email in the contacts database.\n\n:param email: The email address of the contact to search for.\n:type email: str\n:param db: An asynchronous database session.\n:type db: AsyncSession\n\"\"\"",
        "select": "\"\"\"\nSelects a row from a database.\n\n:param table: The name of the table from which to select.\n:type table: str\n:param where: The condition to select on, such as \"id=3\".\n:type where: str\n:param db: An asynchronous database session.\n:type db: AsyncSession\n\"\"\"",
        "upcoming_birthdays": "\"\"\"\nupcoming_birthdays checks the given database for users with upcoming birthdays and returns a list of these users.\n\n:param db: An asynchronous database session.\n:type db: AsyncSession\n:return: A list of users with upcoming birthdays.\n:rtype: list\n\"\"\"",
        "update_contact": "\"\"\"\nUpdate an existing contact in the database.\n\n:param contact_id: The ID of the contact to update.\n:type contact_id: int\n:param contact_data: The data to update the contact with.\n:type contact_data: dict\n:param db: An asynchronous database session.\n:type db: AsyncSession\n\"\"\""
    }
}{
    "src.routes.users": {
        "Depends": "\"\"\"\nDepends takes two parameters and returns a boolean depending on the parameters.\n\n:param arg1: The first parameter of the function.\n:type arg1: Any\n:param arg2: The second parameter of the function.\n:type arg2: Any\n\n:return: A boolean value depending on the values of the parameters.\n:rtype: bool",
        "File": "\"\"\"\nConfirms a user's email by setting the 'confirmed' flag to True.\n\n:param email: The email address of the user to confirm.\n:type email: str\n:param db: An asynchronous database session.\n:type db: AsyncSession\n\"\"\"",
        "Path": "\"\"\"\nConfirms a user's email address by setting the 'confirmed' flag to True.\n\n:param email: The email address of the user to confirm.\n:type email: str\n:param db: An asynchronous database session.\n:type db: AsyncSession\n\"\"\"",
        "Query": "\"\"\"\n    Query a database for the data needed.\n    \n    :param table: The name of the table to query.\n    :type table: str\n    :param query: The query to run on the table.\n    :type query: str\n    :param db: An asynchronous database session.\n    :type db: AsyncSession\n    \"\"\"",
        "Security": "\"\"\"\nConfirms a user's email by setting the 'confirmed' flag to True.\n\n:param email: The email address of the user to confirm.\n:type email: str\n:param db: An asynchronous database session.\n:type db: AsyncSession\n\"\"\"",
        "delete_user": "\"\"\"\nDeletes a user from the database.\n\n:param user_id: The ID of the user to delete.\n:type user_id: int\n:param db: An asynchronous database session.\n:type db: AsyncSession\n\"\"\"",
        "get_db": "\"\"\"\nGets the database associated with a given function.\n\n:param func: The function to get the associated database for.\n:type func: function\n:returns: The database associated with the given function.\n:rtype: AsyncSession\n\"\"\"",
        "router": "\"\"\"\nConfirms a user's email by setting the 'confirmed' flag to True.\n\n:param router: The APIRouter object to use for routing.\n:type router: fastapi.routing.APIRouter\n:param func: The function to be associated with the route.\n:type func: function\n\"\"\"",
        "security": "\"\"\"\nConfirms a user's email by setting the 'confirmed' flag on the HTTPBearer security object to True.\n\n:param security: The HTTPBearer security object.\n:type security: fastapi.security.http.HTTPBearer\n:param email: The email address of the user to confirm.\n:type email: str \n\"\"\"",
        "update_avatar_user": "\"\"\"\nUpdates a user's avatar.\n\n:param user_id: The id of the user to update.\n:type user_id: int\n:param avatar_url: The URL of the new avatar.\n:type avatar_url: str\n:param db: An asynchronous database session.\n:type db: AsyncSession\n\"\"\"",
        "update_user": "\"\"\"\nUpdate user by setting the 'updated' flag to True.\n\n:param user: The user to update\n:type user: User\n:param db: An asynchronous database session.\n:type db: AsyncSession\n\"\"\""
    }
}{
    "src.routes.contacts": {
        "Depends": "\"\"\"\nDepends checks the dependencies of a given task.\n\n:param task: The task to check the dependencies of.\n:type task: Task\n:param db: An asynchronous database session.\n:type db: AsyncSession\n\"\"\"",
        "List": "\"\"\"\nConfirms a list of values by setting the 'confirmed' flag to True.\n\n:param values: The list of values to confirm.\n:type values: typing.List\n:param db: An asynchronous database session.\n:type db: AsyncSession\n\"\"\"",
        "Path": "\"\"\"\nConfirms a user's email by setting the 'confirmed' flag to True. \n\n:param email: The email address of the user to confirm. \n:type email: str \n:param db: An asynchronous database session. \n:type db: AsyncSession",
        "Query": "\"\"\"\nChecks the validity of a user's email by setting the 'confirmed' flag to True.\n\n:param email: The email address of the user to check.\n:type email: str\n:param db: An asynchronous database session.\n:type db: AsyncSession\n\"\"\"",
        "Security": "\"\"\"\nConfirms a user's email by setting the 'confirmed' flag to True.\n\n:param email: The email address of the user to confirm.\n:type email: str\n:param db: An asynchronous database session.\n:type db: AsyncSession\n\"\"\"",
        "create_contact": "\"\"\"\nCreates a contact in the database.\n\n:param name: The name for the contact.\n:type name: str\n:param email: The email address for the contact.\n:type email: str\n:param db: An asynchronous database session.\n:type db: AsyncSession\n\"\"\"",
        "get_contact": "\"\"\"\nGets a contact from the database by their email.\n\n:param email: The email address of the contact to fetch.\n:type email: str\n:param db: An asynchronous database session.\n:type db: AsyncSession\n\"\"\"",
        "get_contacts": "\"\"\"\nGets the contact information for a given user.\n\n:param user_id: The ID of the user to get the contact information for.\n:type user_id: str\n:param db: An asynchronous database session.\n:type db: AsyncSession\n\"\"\"",
        "get_db": "\"\"\"\nGets a database session.\n\n:param db_url: The URL of the database to connect to.\n:type db_url: str\n:return: An asynchronous database session.\n:rtype: AsyncSession\n\"\"\"\n\ndef get_db(db_url):\n    \"\"\"\nGets a database session.\n\n:param db_url: The URL of the database to connect to.\n:type db_url: str\n:return: An asynchronous database session.\n:rtype: AsyncSession\n\"\"\"\n\n    # code to create the database session goes here\n\n    return db_session",
        "remove_contact": "\"\"\"\nRemoves a contact from a user's contact list.\n\n:param contact_id: The ID of the contact to remove.\n:type contact_id: str\n:param db: An asynchronous database session.\n:type db: AsyncSession\n\"\"\"",
        "router": "\"\"\"\nConfirms a user's email by setting the 'confirmed' flag to True. \n\nThis function takes a <fastapi.routing.APIRouter object at 0x0000020958228E90> as its argument. \n\nUsage:\n\nconfirmed_email(email: str, db: AsyncSession)\n\nParameters: \n- email (str): The email address of the user to confirm.\n- db (AsyncSession): An asynchronous database session.\n\nReturns:\nNothing.",
        "search_contact": "\"\"\"\nSearch contact function searches a database for a contact using a given email address.\n\n:param email: The email address of the contact to search for.\n:type email: str\n:param db: An asynchronous database session.\n:type db: AsyncSession\n\"\"\"",
        "security": "\"\"\"\nConfirms a user's email address by setting the 'confirmed' flag to True using an HTTP Bearer authentication object.\n\n:param obj: The HTTPBearer object used for authentication.\n:type obj: fastapi.security.http.HTTPBearer\n:param email: The email address of the user to confirm.\n:type email: str\n:param db: An asynchronous database session.\n:type db: AsyncSession\n\"\"\"",
        "upcoming_birthdays": "\"\"\"\nChecks upcoming birthdays for users and sends them a message.\n\n:param db: An asynchronous database session.\n:type db: AsyncSession\n:param message: The message to be sent to users with upcoming birthdays.\n:type message: str\n\"\"\"",
        "update_contact": "\"\"\"\nUpdate contact information in the database.\n\n:param contact_id: The ID of the contact to update.\n:type contact_id: int\n:param data: The new contact information.\n:type data: dict\n:param db: An asynchronous database session.\n:type db: AsyncSession\n\"\"\""
    }
}{
    "src.repository.users": {
        "confirmed_email": "\"\"\"\nConfirms a user's email by setting the 'confirmed' flag to True.\n\n:param email: The email address of the user to confirm.\n:type email: str\n:param db: An asynchronous database session.\n:type db: AsyncSession\n\"\"\"",
        "create_user": "    \"\"\"\n    Creates a new user with the given information.\n\n    :param username: The username of the user.\n    :type username: str\n    :param email: The email address of the user.\n    :type email: str\n    :param password: The password of the user.\n    :type password: str\n    :param age: The age of the user.\n    :type age: int\n    :param gender: The gender of the user.\n    :type gender: str\n    :returns: The created user object.\n    :rtype: User\n    \"\"\"",
        "get_user_by_email": "    \"\"\"\n    Retrieves a user by email address.\n\n    :param email: The email address of the user to retrieve.\n    :type email: str\n    :return: The user object.\n    :rtype: User\n    \"\"\"",
        "remove_user": "    \"\"\"\n    Removes a user from the system.\n\n    :param user_id: The ID of the user to remove.\n    :type user_id: int\n    :param db: An asynchronous database session.\n    :type db: AsyncSession\n    \"\"\"",
        "select": "\"\"\"\nConfirms a user's email by setting the 'confirmed' flag to True.\n\n:param email: The email address of the user to confirm.\n:type email: str\n:param db: An asynchronous database session.\n:type db: AsyncSession\n\"\"\"",
        "update_avatar": "\"\"\"\nUpdates the avatar of a user by setting a new avatar URL.\n\n:param user_id: The ID of the user to update the avatar for.\n:type user_id: str\n:param avatar_url: The new avatar URL to set.\n:type avatar_url: str\n\"\"\"",
        "update_token": "\"\"\"\nUpdates a user's authentication token and returns the updated token.\n\n    :param user_id: The ID of the user to update the token for.\n    :type user_id: int\n    :param token: The new token value to update.\n    :type token: str\n    :param db: An asynchronous database connection session.\n    :type db: AsyncSession\n\n    :return: The updated authentication token.\n    :rtype: str\n\"\"\"",
        "update_user": "\"\"\"\nUpdates information of a user.\n\n:param user_id: The ID of the user to update.\n:type user_id: int\n:param data: The updated data for the user.\n:type data: dict\n:param db: An asynchronous database session.\n:type db: AsyncSession\n\"\"\""
    }
}{
    "src.repository.contacts": {
        "create_contact": "\"\"\"\nCreate documentation for function: <function create_contact at 0x000002ABE00027A0>\n\nExample func:<function confirmed_email at 0x000002ABDF7911C0>\n\nResponse example:     \"\"\"\n    Confirms a user's email by setting the 'confirmed' flag to True.\n\n    :param email: The email address of the user to confirm.\n    :type email: str\n    :param db: An asynchronous database session.\n    :type db: AsyncSession\n    \"\"\"\n\"\"\"",
        "get_contact": "\"\"\"\nGet contact information for the specified user.\n\nThis function retrieves the contact information for a user based on their email address.\n\n:param email: The email address of the user.\n:type email: str\n:param database: The database instance to retrieve the contact information from.\n:type database: Database\n:return: The contact information for the user.\n:rtype: dict\n\"\"\"",
        "get_contacts": "\"\"\"\nGet all contacts from the database.\n\n:param db: An asynchronous database session.\n:type db: AsyncSession\n:return: A list of contacts.\n:rtype: List[dict]\n\"\"\"",
        "or_": "\"\"\"\nConfirms a user's email by setting the 'confirmed' flag to True.\n\n:param email: The email address of the user to confirm.\n:type email: str\n:param db: An asynchronous database session.\n:type db: AsyncSession\n\"\"\"",
        "remove_contact": "    \"\"\"\n    Removes a contact from the contact list.\n\n    :param name: The name of the contact to remove.\n    :type name: str\n    :param email: The email address of the contact to remove.\n    :type email: str\n    :param phone: The phone number of the contact to remove.\n    :type phone: str\n    :param db: An asynchronous database session.\n    :type db: AsyncSession\n    \"\"\"",
        "search_contact": "    \"\"\"\n    Searches for a contact in the database based on the provided parameters.\n\n    :param first_name: The first name of the contact.\n    :type first_name: str\n    :param last_name: The last name of the contact.\n    :type last_name: str\n    :param email: The email address of the contact.\n    :type email: str\n    :param phone_number: The phone number of the contact.\n    :type phone_number: str\n    :return: A list of contacts matching the provided parameters.\n    :rtype: List[Contact]\n    \"\"\"",
        "select": "    \"\"\"    \n    Selects specific columns from a table based on the given criteria.\n\n    :param table: The name of the table to select from.\n    :type table: str\n    :param columns: The columns to select.\n    :type columns: list[str]\n    :param criteria: The criteria to filter the rows.\n    :type criteria: dict[str, Any]\n    :return: The selected rows.\n    :rtype: list[dict[str, Any]]\n    \"\"\"",
        "upcoming_birthdays": "\"\"\"\n    Retrieves upcoming birthdays from the database.\n\n    :param db: An asynchronous database session.\n    :type db: AsyncSession\n    :return: A list of upcoming birthdays.\n    :rtype: List[Dict]\n\"\"\"",
        "update_contact": "    \"\"\"\n    Updates a contact's information in the database.\n\n    :param contact_id: The ID of the contact to update.\n    :type contact_id: int\n    :param name: The updated name for the contact.\n    :type name: str\n    :param email: The updated email address for the contact.\n    :type email: str\n    :param phone: The updated phone number for the contact.\n    :type phone: str\n    :param db: The database session to use for the update.\n    :type db: Session\n    :return: The updated contact object.\n    :rtype: Contact\n    \"\"\""
    }
}{
    "src.repository.users": {
        "confirmed_email": "\"\"\"\n    Confirms a user's email by setting the 'confirmed' flag to True.\n\n    :param email: The email address of the user to confirm.\n    :type email: str\n    :param db: An asynchronous database session.\n    :type db: AsyncSession\n\"\"\"",
        "create_user": "\"\"\"\nCreate documentation for function: <function create_user at 0x0000027F5AFCE200>\n\nExample func:<function confirmed_email at 0x0000027F5AFCE160>\n\nResponse example:\n    \"\"\"\n    Confirms a user's email by setting the 'confirmed' flag to True.\n\n    :param email: The email address of the user to confirm.\n    :type email: str\n    :param db: An asynchronous database session.\n    :type db: AsyncSession\n    \"\"\"\n\"\"\"",
        "get_user_by_email": "    \"\"\"\n    Retrieves a user by their email address.\n\n    :param email: The email address of the user to retrieve.\n    :type email: str\n    :param db: An asynchronous database session.\n    :type db: AsyncSession\n    :return: The retrieved user.\n    :rtype: User\n    \"\"\"",
        "remove_user": "\"\"\"\nRemoves a user from the system.\n\n:param user_id: The ID of the user to remove.\n:type user_id: int\n:param db: An instance of the database connection.\n:type db: DatabaseConnection\n\"\"\"",
        "select": "\"\"\"\nSelects records from a database table based on a given criteria.\n\n    :param table_name: The name of the table to select from.\n    :type table_name: str\n    :param criteria: The criteria to filter the records by.\n    :type criteria: str\n    :return: The selected records.\n    :rtype: list\n\"\"\"",
        "update_avatar": "    \"\"\"\n    Updates the avatar of a user.\n\n    :param user_id: The unique identifier of the user.\n    :type user_id: int\n    :param avatar: The new avatar image.\n    :type avatar: str\n    :param db: An asynchronous database session.\n    :type db: AsyncSession\n    \"\"\"",
        "update_token": "\"\"\"\nUpdates the authentication token for a user.\n\n:param user_id: The ID of the user to update the token for.\n:type user_id: int\n:param new_token: The new authentication token.\n:type new_token: str\n:return: The updated token.\n:rtype: str\n\"\"\"",
        "update_user": "\"\"\"\n    Updates a user's information in the database.\n\n    :param email: The email address of the user to update.\n    :type email: str\n    :param info: A dictionary containing the updated information for the user.\n    :type info: dict\n    :return: True if the update was successful, False otherwise.\n    :rtype: bool\n\"\"\""
    }
}{
    "src.repository.contacts": {
        "create_contact": "\"\"\"\nCreates a new contact in the system.\n\n:param name: The name of the contact.\n:type name: str\n:param email: The email address of the contact.\n:type email: str\n:param phone: The phone number of the contact.\n:type phone: str\n:return: The newly created contact.\n:rtype: dict\n\"\"\"",
        "get_contact": "\"\"\"\nConfirms a user's email by setting the 'confirmed' flag to True.\n\n:param email: The email address of the user to confirm.\n:type email: str\n:param db: An asynchronous database session.\n:type db: AsyncSession\n\"\"\"",
        "get_contacts": "\"\"\"\nGet a list of contacts from the database.\n\n:param db: An asynchronous database session.\n:type db: AsyncSession\n:return: A list of contacts from the database.\n:rtype: List[str]\n\"\"\"",
        "or_": "\"\"\"\nOr operation between given two param: bit a with bit b\n\n:param a: Bit a\n:type a: int\n:param b: Bit b\n:type b: int\n:return: Result of the or operation\n:rtype: int\n\"\"\"",
        "remove_contact": "\"\"\"\nRemoves a contact from the database.\n\n:param email: The email address of the contact to remove.\n:type email: str\n:param db: An asynchronous database session.\n:type db: AsyncSession\n\"\"\"",
        "search_contact": "    \"\"\"\n    Searches for a contact in a contact list based on the given criteria.\n\n    :param criteria: The criteria to search by.\n    :type criteria: str\n    :param contact_list: The list of contacts to search in.\n    :type contact_list: list\n    :return: The list of contacts that match the given criteria.\n    :rtype: list\n    \"\"\"",
        "select": "\"\"\"\nConfirms a user's email by setting the 'confirmed' flag to True.\n\n:param email: The email address of the user to confirm.\n:type email: str\n:param db: An asynchronous database session.\n:type db: AsyncSession\n\"\"\"",
        "upcoming_birthdays": "    \"\"\"\n    Retrieves upcoming birthdays from a given date.\n\n    :param date: The date from which to retrieve upcoming birthdays.\n    :type date: str\n    :param num_days: The number of days into the future to retrieve birthdays for.\n    :type num_days: int\n    :returns: A list of names of people with upcoming birthdays.\n    :rtype: list[str]\n    \"\"\"",
        "update_contact": "\"\"\"\nUpdates a contact's information.\n\n:param contact_id: The ID of the contact to update.\n:type contact_id: int\n:param new_email: The new email address for the contact.\n:type new_email: str\n:param new_phone: The new phone number for the contact.\n:type new_phone: str\n:param new_address: The new address for the contact.\n:type new_address: str\n:return: True if the contact is successfully updated, False otherwise.\n:rtype: bool\n\"\"\""
    }
}{
    "src.routes.users": {
        "Depends": "    \"\"\"\n    Depends a function(e.g. view function, API endpoint) Depending a function means that the decorated function depends on some resources the decorated function will ask the framework to provide those resources first and then call the decorated function.\n\n    :param func: the function depended-on.\n    :type func: function\n    :return: the function depending-on.\n    :rtype: function\n    \"\"\"",
        "File": "\"\"\"\n    File function at 0x0000027F5D56EAC0\n\n    This function is used to...\n\"\"\"",
        "Path": "\"\"\"\nConfirms a user's email by setting the 'confirmed' flag to True.\n\n:param email: The email address of the user to confirm.\n:type email: str\n:param db: An asynchronous database session.\n:type db: AsyncSession\n\"\"\"",
        "Query": "\"\"\"\nQuery is a function that performs a database query operation.\n\nExample func: confirmed_email\n\nResponse example: \"\"\"\n    Confirms a user's email by setting the 'confirmed' flag to True.\n\n    :param email: The email address of the user to confirm.\n    :type email: str\n    :param db: An asynchronous database session.\n    :type db: AsyncSession\n    \"\"\"",
        "Security": "\"\"\"\nSecurity is a function that performs various security operations on the system.\n\n:param param1: The first parameter of the function. (type: type1)\n:param param2: The second parameter of the function. (type: type2)\n:param param3: The third parameter of the function. (type: type3)\n...\n\n\"\"\"",
        "delete_user": "\"\"\"\nDeletes a user from the database.\n\n:param user_id: The ID of the user to delete.\n:type user_id: int\n:param db: An asynchronous database session.\n:type db: AsyncSession\n\"\"\"",
        "get_db": "\"\"\"\n    Retrieves the database connection.\n\n    :return: The database connection.\n    :rtype: AsyncSession\n\"\"\"\n",
        "router": "\"\"\"\nConfirms a user's email by setting the 'confirmed' flag to True.\n\n:param email: The email address of the user to confirm.\n:type email: str\n:param db: An asynchronous database session.\n:type db: AsyncSession\n\"\"\"",
        "security": "\"\"\"\nConfirms a user's email by setting the 'confirmed' flag to True.\n\n:param email: The email address of the user to confirm.\n:type email: str\n:param db: An asynchronous database session.\n:type db: AsyncSession\n\"\"\"",
        "update_avatar_user": "\"\"\"\nUpdates a user's avatar image.\n\n:param user_id: The ID of the user whose avatar to update.\n:type user_id: int\n:param avatar_file: The file object of the new avatar image.\n:type avatar_file: file\n:param db: The database connection object.\n:type db: DatabaseConnection\n:return: True if the avatar is successfully updated, False otherwise.\n:rtype: bool\n\"\"\"",
        "update_user": "    \"\"\"\n    Updates a user's information in the database.\n\n    :param user_id: The ID of the user to update.\n    :type user_id: int\n    :param data: A dictionary containing the updated information for the user.\n    :type data: dict\n    :param db: An asynchronous database session.\n    :type db: AsyncSession\n    :returns: True if the user was successfully updated, False otherwise.\n    :rtype: bool\n    \"\"\""
    }
}{
    "src.routes.contacts": {
        "Depends": "\"\"\"\nConfirms a user's email by setting the 'confirmed' flag to True.\n\n:param email: The email address of the user to confirm.\n:type email: str\n:param db: An asynchronous database session.\n:type db: AsyncSession\n\"\"\"",
        "List": "\"\"\"\ntyping.List\n\nThe typing.List is a type hint in Python that represents a generic list. It is used to annotate function signatures, to specify the type of elements in a list.\n\nExample usage:\ndef my_function(my_list: typing.List[str]) -> None:\n    ...\n\nParameters:\n- my_list: The list to be processed or manipulated.\n- typing.List[str]: Specifies that the elements in the list are of type str.\n\nReturn type:\n- None: This function does not return anything.\n\nNote:\n- The typing module needs to be imported to use the typing.List type hint.\n\"\"\"",
        "Path": "\"\"\"\nPath function does not have documentation. \nPlease add documentation to the function before running the program.\n\"\"\"",
        "Query": "\"\"\"\nQuery is a function used to query the database and retrieve specific data.\n\nExample func: confirmed_email is a function used to confirm a user's email by setting the 'confirmed' flag to True.\n\nParameters:\n- email: The email address of the user to confirm. (type: str)\n- db: An asynchronous database session. (type: AsyncSession)\n\"\"\"",
        "Security": "\"\"\"\nSecurity\n\nThis function is responsible for handling user email confirmation. \n\n:param email: The email address of the user to confirm.\n:type email: str\n:param db: An asynchronous database session.\n:type db: AsyncSession\n\"\"\"",
        "create_contact": "\"\"\"\nCreate documentation for function: <function create_contact at 0x0000027F5E1D68E0>\n\nExample func:<function confirmed_email at 0x0000027F5AFCE160>\n\nResponse example:\n    \"\"\"\n    Confirms a user's email by setting the 'confirmed' flag to True.\n\n    :param email: The email address of the user to confirm.\n    :type email: str\n    :param db: An asynchronous database session.\n    :type db: AsyncSession\n    \"\"\"\n\"\"\"",
        "get_contact": "\"\"\"\nConfirms a user's email by setting the 'confirmed' flag to True.\n\n:param email: The email address of the user to confirm.\n:type email: str\n:param db: An asynchronous database session.\n:type db: AsyncSession\n\"\"\"",
        "get_contacts": "Here is the documentation for the function `get_contacts`:\n\n\"\"\"\nRetrieves a list of contacts for a user.\n\n:param user_id: The ID of the user.\n:type user_id: int\n:param filters: Optional filters to apply on the list of contacts.\n:type filters: dict\n:param limit: The maximum number of contacts to retrieve.\n:type limit: int\n\n:return: A list of contacts.\n:rtype: list\n\"\"\"",
        "get_db": "\"\"\"\nConfirms a user's email by setting the 'confirmed' flag to True.\n\n:param email: The email address of the user to confirm.\n:type email: str\n:param db: An asynchronous database session.\n:type db: AsyncSession\n\"\"\"",
        "remove_contact": "    \"\"\"\n    Removes a contact from a contact list.\n\n    :param contact_id: The ID of the contact to be removed.\n    :type contact_id: int\n    :param contact_list_id: The ID of the contact list from which the contact should be removed.\n    :type contact_list_id: int\n    :param db: An asynchronous database session.\n    :type db: AsyncSession\n    \"\"\"",
        "router": "\"\"\"\nConfirms a user's email by setting the 'confirmed' flag to True.\n\n:param email: The email address of the user to confirm.\n:type email: str\n:param db: An asynchronous database session.\n:type db: AsyncSession\n\"\"\"",
        "search_contact": "    \"\"\"\n    Searches for a contact in the database.\n\n    :param name: The name of the contact to search for.\n    :type name: str\n    :param phone: The phone number of the contact to search for.\n    :type phone: str\n    :param email: The email address of the contact to search for.\n    :type email: str\n    :param address: The address of the contact to search for.\n    :type address: str\n    :returns: A list of contacts that match the search criteria.\n    :rtype: List[Contact]\n    \"\"\"",
        "security": "\"\"\"\nA function that confirms a user's email by setting the 'confirmed' flag to True.\n\nParameters:\n- email: The email address of the user to confirm. (str)\n- db: An asynchronous database session. (AsyncSession)\n\"\"\"",
        "upcoming_birthdays": "    \"\"\"\n    Retrieves upcoming birthdays of users.\n\n    :param days: The number of days to retrieve upcoming birthdays for. Defaults to 7.\n    :type days: int\n    :param db: An asynchronous database session.\n    :type db: AsyncSession\n    :return: A list of users with upcoming birthdays.\n    :rtype: List[User]\n    \"\"\"",
        "update_contact": "    \"\"\"\n    Updates a contact in the contact list.\n\n    :param contact_id: The ID of the contact to update.\n    :type contact_id: int\n    :param name: The updated name for the contact.\n    :type name: str\n    :param email: The updated email address for the contact.\n    :type email: str\n    :param phone: The updated phone number for the contact.\n    :type phone: str\n    :return: True if the contact was successfully updated, False otherwise.\n    :rtype: bool\n    \"\"\""
    }
}